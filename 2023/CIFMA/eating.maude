load generic-evolution.maude

(mod EATING is
    protecting EVOLUTION .

    subsort String < Oid .

    ops b d : Nat -> InfoItem [ctor] .
    op noParam : -> Parameter [ctor] .

    op init : -> Configuration .

    eq init = 
        < "hum" : Human |
            cognition : "cogn",
            physiology : "phys" >
        < "phys" : System |
            currentState : (noInfo ["hungry"]),
            transitions : 
                (noInfo ["hungry"] -- goal("eat") >| -> noInfo ["hungry"]);
                (noInfo ["hungry"] -- "eat" -> noInfo [noInfo])
        >
        < "cogn" : Cognition |
            stmCapacity : 7,
            cognitiveLoad : 0,
            shortTermMem : (emptySTM),
            longTermMem : 
                (goal("eat") : "food available" |> == noParam => "eat" >| noInfo);
                (goal("eat") : noInfo |> == noParam => "open cupboard" >| "no food available");
                (goal("eat") : noInfo |> "food available" == noParam => "take food" >| "food available");
                (goal("eat") : "no food available" |> == noParam => >| goal("buy lunch"));
                (goal("buy lunch") : "burgers", "drinks" |> == noParam => "buy lunch" >| noInfo);
                (goal("buy lunch") : noInfo |> "burgers" == noParam => >| "burgers");
                (goal("buy lunch") : noInfo |> "drinks" == noParam => >| "drinks")
        >
        < "cupboard" : System |
            currentState : ("door closed" [ noInfo ]),
            transitions :
                ("door closed" [ noInfo ] -- "open cupboard" -> "door opened" [ noInfo ])
        > 
        < "vending" : System |
            currentState : ("burgers", "drinks" [ b(1), d(1) ]),
            transitions :
                ("burgers", "drinks" [ b(1), d(1) ] -- "buy lunch" -> "food available" [ b(0), d(0) ]);
                ("food available" [ noInfo ] -- "take food" -> noInfo [ noInfo ])
        >

    .

endm)


(match
        
        C:Configuration
        < H:String : Human | cognition : CO:String,
                      physiology : PHY:String >
        
      < CO:Oid : Cognition | cognitiveLoad : CL:Nat,
                        stmCapacity : CAP:Nat,
                        shortTermMem : STMEM:STM,
                        longTermMem : (G:Goal : INFO1:Information |> PERC:InfoItem == PARAM:Parameter => >| NEWSTM:ContentSTMList) ; LTMEM:LTM >
      < TS:Oid : System | currentState : PERC:InfoItem , INFO5:Information [ INV3:Information ],
                      transitions : TRANS:LTS >           
<=?
        < "cogn" : Cognition |
            cognitiveLoad : 0,
            longTermMem :((goal("eat"): "no food available" |> == noParam => >| goal("buy lunch"));
                (goal("buy lunch"): noInfo |> "burgers" == noParam => >| "burgers");
                (goal("buy lunch"): noInfo |> "drinks" == noParam => >| "drinks");
                (goal("buy lunch"): "burgers","drinks" |> == noParam => "buy lunch" >| noInfo);
                (goal("eat"): "food available" |> == noParam => "eat" >| noInfo);
                (goal("eat"): noInfo |> == noParam => "open cupboard" >| "no food available");
                goal("eat"): noInfo |> "food available" == noParam => "take food" >| "food available"),
            shortTermMem :(("burgers" with noAdd);(goal("buy lunch")with noAdd); goal("eat")with noAdd),
            stmCapacity : 7 >
        < "cupboard" : System |
            currentState : "door opened"[noInfo],
            transitions : "door closed"[noInfo]-- "open cupboard" -> "door opened"[noInfo] >
        < "hum" : Human |
            cognition : "cogn",
            physiology : "phys" >
        < "phys" : System |
            currentState : noInfo["hungry"],
            transitions :((noInfo["hungry"]-- "eat" -> noInfo[noInfo]); noInfo["hungry"]-- goal("eat")>| -> noInfo["hungry"]) >
        < "vending" : System |
            currentState : "burgers","drinks"[b(1),d(1)],
            transitions :(("food available"[noInfo]-- "take food" -> noInfo[noInfo]); "burgers","drinks"[b(1),d(1)]--
            "buy lunch" -> "food available"[b(0),d(0)]) >
such that established(G:Goal,STMEM:STM) /\ enabling(INFO1:Information,STMEM:STM)
         /\ CL:Nat + load(STMEM:STM) <= CAP:Nat
.)

---(
    1. We can not use variables in rules
)