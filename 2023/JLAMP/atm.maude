mod BASIC-SORT-DEF is

   sorts SystemState SystemAction HumanAction Action .
   sorts InfoPiece Perception .

   subsorts SystemAction HumanAction < Action .

   op noAct : -> SystemAction [ctor] .
   op noPerc : -> Perception [ctor] .

endm


mod LTS-DEF is

    including BASIC-SORT-DEF .

    sorts Transition LTS Configuration .
    subsort Transition < LTS .
    op _--_->_ : SystemState SystemAction SystemState -> Transition [ctor] .
    op none : -> LTS [ctor] .
    op _;_ : LTS LTS -> LTS [ctor comm assoc id: none] .
    op {_}`[_] : LTS SystemState -> Configuration . ---

    vars S T : SystemState .
    var A : SystemAction .
    var M : LTS .

    rl [LTS-evolution] :
        { (S -- A -> T) ; M } [ S ] => { (S -- A -> T) ; M } [ T ] .

endm



mod HUMAN-DEF is

    including LTS-DEF .

    sorts Information BehaviouralRule LTM .
    subsort BehaviouralRule < LTM .
    subsort InfoPiece < Information .
    subsort Perception < SystemState .

    op noInfo : -> Information [ctor] .
    op __ : Information Information -> Information
                                  [ctor comm assoc id: noInfo] .
    op _|>_=>_>|_ : Information Perception Action Information
                                     -> BehaviouralRule [ctor] .
    op blank : -> LTM [ctor] .
    op __ : LTM LTM -> LTM [ctor comm assoc id: blank] .
    op [STM:_||`LTM:_|]`{_}`[_] : Information LTM LTS SystemState
                                     -> Configuration [ctor] .
    var P : Perception .
    vars S T : SystemState .
    var A : SystemAction .
    var H : HumanAction .
    var M : LTS .
    vars IR IS MS : Information .
    var ML : LTM .


    crl [interaction_perc] :
       [STM: IR MS || LTM: (IR |> P => A >| IS) ML |]
       { (P -- A -> T) ; M } [ P ]
    =>
       [STM: IS MS || LTM: (IR |> P => A >| IS) ML |]
       { (P -- A -> T) ; M } [ T ]
    if A =/= noAct /\ P =/= noPerc .


    crl [interaction_act_only] :
       [STM: IR MS || LTM: (IR |> noPerc => A >| IS) ML |]
       { (S -- A -> T) ; M } [ S ]
    =>
       [STM: IS MS || LTM: (IR |> noPerc => A >| IS) ML |]
       { (S -- A -> T) ; M } [ T ]
    if A =/= noAct .


    crl [attention] :
       [STM: IR MS || LTM: (IR |> P => noAct >| IS) ML |]
       { M } [ P ]
    =>
       [STM: IS MS || LTM: (IR |> P => noAct >| IS) ML |]
       { M } [ P ]
    if P =/= noPerc .


    rl [reasoning] :
       [STM: IR MS || LTM: (IR |> noPerc => noAct >| IS) ML |]
       { M } [ T ]
    =>
       [STM: IS MS || LTM: (IR |> noPerc => noAct >| IS) ML |]
       { M } [ T ] .


    rl [human] :
       [STM: IR MS || LTM: (IR |> noPerc => H >| IS) ML |]
       { M } [ T ]
    =>
       [STM: IS MS || LTM: (IR |> noPerc => H >| IS) ML |]
       { M } [ T ] .


    rl [internal] :
       [STM: MS || LTM: ML |] { (S -- noAct -> T) ; M } [ P ]
    =>
       [STM: MS || LTM: ML |] { (S -- noAct -> T) ; M } [ T ] .


endm


mod EXAMPLE-ATM is

    including HUMAN-DEF .

    ops requestedCard requestedPin deliveredCash returnedCard :
                       -> Perception [ctor] .
    ops insertCard enterPin collectCash collectCard :
                       -> SystemAction [ctor] .
    op leave : -> HumanAction [ctor] .
    ops gotCash gotCard : -> InfoPiece [ctor] .

    op ATMtask : -> LTM .

    eq ATMtask = (noInfo |> requestedCard => insertCard >| noInfo)
                 (noInfo |> requestedPin => enterPin >| noInfo)
                 (noInfo |> deliveredCash => collectCash >| gotCash)
                 (noInfo |> returnedCard => collectCard >| gotCard)
                 (gotCash gotCard |>  noPerc => leave >| noInfo) .

    ops OldATM NewATM : -> LTS .

    eq OldATM = (requestedCard -- insertCard -> requestedPin) ;
                (requestedPin -- enterPin -> deliveredCash) ;
                (deliveredCash -- collectCash -> returnedCard) ;
                (returnedCard -- collectCard -> requestedCard) .

    eq NewATM = (requestedCard -- insertCard -> requestedPin) ;
                (requestedPin -- enterPin -> returnedCard) ;
                (returnedCard -- collectCard -> deliveredCash) ;
                (deliveredCash -- collectCash -> requestedCard) .

endm

---frew [1] [STM: noInfo || LTM: ATMtask |] { OldATM } [ requestedCard ] .

frew [1] [STM: noInfo || LTM: ATMtask |] { NewATM } [ requestedCard ] .

